AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  promo-bot-mx

  Sample SAM Template for promo-bot-mx

Parameters:
  TelegramURL:
    Type: String
  TelegramChatId:
    Type: String
  TwitterApplicationConsumerKey:
    Type: String
  TwitterApplicationSecret:
    Type: String
  TwitterUserAccessToken:
    Type: String
  TwitterUserSecret:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x

Resources:
  LambdaExecutionPromoBotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role to execute lambda functions of the promo-bot-mx
      Policies:
        - PolicyName: 'DynamoDBPromoBasicOperations'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt PromosTable.Arn
        - PolicyName: LambdaPromoBasicOperations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      RoleName: LambdaExecutionPromoBotRole
  GetHotPromos:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: get-hot-promos/
      Handler: app.handler
      MemorySize: 1024
      Timeout: 15
      Role: !GetAtt LambdaExecutionPromoBotRole.Arn
      Environment:
        Variables:
          TELEGRAM_URL: !Ref TelegramURL
          TELEGRAM_CHAT_ID: !Ref TelegramChatId
          TWITTER_APPLICATION_CONSUMER_KEY: !Ref TwitterApplicationConsumerKey
          TWITTER_APPLICATION_SECRET: !Ref TwitterApplicationSecret
          TWITTER_USER_ACCESS_TOKEN: !Ref TwitterUserAccessToken
          TWITTER_USER_SECRET: !Ref TwitterUserSecret
          ENVIRONMENT: prod
          ENDPOINT: https://dynamodb.us-east-2.amazonaws.com
      Events:
        ExecuteEvery20Minutes:
          Type: Schedule
          Properties:
            Schedule: rate(20 minutes)
  DeleteHotPromos:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-hot-promos/
      Handler: app.handler
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt LambdaExecutionPromoBotRole.Arn
      Environment:
        Variables:
          ENVIRONMENT: prod
          THRESHOLD_DAYS: 5
          ENDPOINT: https://dynamodb.us-east-2.amazonaws.com
      Events:
        ExecuteEveryDay:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
  PromosTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: 'N'
      TableName: promo_bot_mx_promos
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: created_at
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

Outputs:
  GetHotPromos:
    Description: "Lambda to get and save new Hot Promos"
    Value: !GetAtt GetHotPromos.Arn
  LambdaExecutionPromoBotRole:
    Description: "Role for the lambda execution"
    Value: !GetAtt LambdaExecutionPromoBotRole.Arn
